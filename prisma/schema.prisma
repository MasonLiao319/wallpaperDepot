// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  customer_id Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  createdAt   DateTime @default(now())

  // Foreign key for Address
  addressId   Int?      // Optional foreign key to Address
  address     Address?  @relation(fields: [addressId], references: [id])

  // Relations
  transactions Transaction[]
  creditCard   CreditCard? // One-to-one relationship with CreditCard
  cartItems    CartItem[]  // One-to-many relationship with CartItem
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  cost        Decimal
  filename    String?
  createdAt   DateTime @default(now())

  // Relations
  cartItems    CartItem[]  // One-to-many relationship with CartItem
}

model Transaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  productIds  String   // Store product IDs as a comma-separated string
  totalAmount Decimal
  createdAt   DateTime @default(now())

  // Relations
  user Customer @relation(fields: [userId], references: [customer_id])
}

model Address {
  id          Int      @id @default(autoincrement())
  street      String
  city        String
  province    String
  country     String
  postal_code String

  // Relations
  customers   Customer[] // A list of customers associated with this address
}

model CreditCard {
  id             Int      @id @default(autoincrement())
  cardNumber     String   // Store the encrypted card number
  cardholderName String
  cvv            String   // Store the encrypted CVV
  expiryDate     String   // Store the encrypted expiry date
  customerId     Int      @unique // One-to-one relationship with Customer

  // Relations
  customer       Customer @relation(fields: [customerId], references: [customer_id])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int      // Foreign key to associate with Customer
  productId Int      // Foreign key to associate with Product
  quantity  Int      @default(1) // New field to track quantity
  createdAt DateTime @default(now())

  // Relations
  user    Customer @relation(fields: [userId], references: [customer_id])
  product Product  @relation(fields: [productId], references: [id])
}
